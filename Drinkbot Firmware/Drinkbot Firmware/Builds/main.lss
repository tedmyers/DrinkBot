
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e39  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001650  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initIO>:
volatile int pourTime; // time pump is on (in milliseconds)

void initIO(void)
{
    // set relay pin as output
    RELAY_DDR   |= _BV(RELAY_PIN);
  90:	20 9a       	sbi	0x04, 0	; 4
    
    // initialize switches as inputs
    SW_DDR      &= ~( _BV(SW_GREEN) | _BV(SW_RED) );
  92:	87 b1       	in	r24, 0x07	; 7
  94:	86 7f       	andi	r24, 0xF6	; 246
  96:	87 b9       	out	0x07, r24	; 7
    
    // initialize leds in buttons as outputs
    SW_DDR      |= ( _BV(SW_GREEN_LED) | _BV(SW_RED_LED) );
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	87 b9       	out	0x07, r24	; 7
    
    // initialize potentiometer as input
    POT_DDR     |= _BV(POT);
  9e:	3c 9a       	sbi	0x07, 4	; 7
    
    // Enable internal pull-up resistors on switches
    SW_PORT     |= _BV(SW_RED) | _BV(SW_GREEN);
  a0:	88 b1       	in	r24, 0x08	; 8
  a2:	89 60       	ori	r24, 0x09	; 9
  a4:	88 b9       	out	0x08, r24	; 8
    
    // Make sure relay is off, just in case
    RELAY_PORT  &= ~_BV(RELAY_PIN);
  a6:	28 98       	cbi	0x05, 0	; 5
    
    //Enable interrupts
    PCICR       |= _BV(SW_INT_FLAG);
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
    PCMSK1      |= _BV(SW_RED) | _BV(SW_GREEN);
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	89 60       	ori	r24, 0x09	; 9
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <pourDrink_timed>:
void pourDrink_timed(void) // uses volatile global variables to pour drink
{
    
    // read analog value
    
    int pourCounter = pourTime;
  be:	80 91 01 01 	lds	r24, 0x0101
  c2:	90 91 02 01 	lds	r25, 0x0102
    
    // pour drink, check every ms
    while ( pour_drink && pourCounter )
  c6:	20 91 00 01 	lds	r18, 0x0100
  ca:	22 23       	and	r18, r18
  cc:	59 f0       	breq	.+22     	; 0xe4 <pourDrink_timed+0x26>
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	49 f0       	breq	.+18     	; 0xe4 <pourDrink_timed+0x26>
    {
        RELAY_PORT |= _BV(RELAY_PIN);
  d2:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	e9 ef       	ldi	r30, 0xF9	; 249
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <pourDrink_timed+0x1a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <pourDrink_timed+0x20>
  de:	00 00       	nop
        _delay_ms(1);
        --pourCounter;
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 cf       	rjmp	.-30     	; 0xc6 <pourDrink_timed+0x8>
    }
    
    RELAY_PORT &= ~_BV(RELAY_PIN); // stop pouring
  e4:	28 98       	cbi	0x05, 0	; 5
  e6:	08 95       	ret

000000e8 <main>:
#endif


int main(void)
{
    initIO();
  e8:	0e 94 48 00 	call	0x90	; 0x90 <initIO>
    // for now, just toggle the relay pin (for HW debugging)
    while(1)
    {
        _delay_ms(1000); // wait a second
        
        RELAY_PORT ^= _BV(RELAY_PIN); // use xor to toggle pin
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	2f e3       	ldi	r18, 0x3F	; 63
  f0:	3d e0       	ldi	r19, 0x0D	; 13
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0xc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x16>
  fe:	00 00       	nop
 100:	85 b1       	in	r24, 0x05	; 5
 102:	89 27       	eor	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
 106:	f3 cf       	rjmp	.-26     	; 0xee <main+0x6>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
