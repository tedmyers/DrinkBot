   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 110               	.global	initIO
 112               	initIO:
   1:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** /**********************************************
   2:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  
   3:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  Firmware for the DrinkBot Device
   4:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  2/27/2016
   5:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  
   6:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  Ted Myers & Noah Johnson
   7:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  
   8:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****  **********************************************/
   9:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  10:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Currently untested code
  11:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  12:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  13:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Basic idea: code runs an Atmega328p that is connected to:
  14:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Two buttons w/integrated LEDs
  15:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -One pushbutton rotary encoder
  16:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Display LEDs?
  17:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Decorative lighting LEDs
  18:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Buzzer/speaker?
  19:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Electromechanical relay, turns on/off pump
  20:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  21:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Pours a drink for a user-defined length of time
  22:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  23:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // To do:
  24:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Decide and solder all devices, update pins in code
  25:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Decide about lighting and visual indication
  26:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -Write code for everything
  27:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // -
  28:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  29:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  30:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  31:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #include <stdio.h>
  32:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #include <avr/io.h>
  33:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #include <avr/interrupt.h>
  34:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #include <util/delay.h>
  35:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #include <stdbool.h> // for boolean values
  36:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  37:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Relay: controls drink pouring
  38:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define RELAY_PORT  PORTB   // port relay connected to
  39:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define RELAY_DDR   DDRB    // port data direction register
  40:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define RELAY_PIN   PB0     // relay: controls drink flow (on/off) - can be P1?
  41:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  42:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Switches: Red and Green, both with an integrated LED
  43:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_PORT         PORTC   // port switches are connected to
  44:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_DDR          DDRC    // port data direction register
  45:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_PIN          PINC    // pin for button port
  46:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_GREEN        PC3     // Switch 1
  47:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_RED          PC0     // Switch 2
  48:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_RED_LED      PC1     // LED for switch 1
  49:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_GREEN_LED    PC2     // LED for switch 2
  50:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_INT_VECT     PCINT1_vect       // Interrupt vector that corresponds to SW_port pins    (
  51:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define SW_INT_FLAG     0   // Interrupt flag to set                                (Ex: PCIE1)
  52:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  53:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** // Analog Potentiometer
  54:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define POT_PORT PORTC
  55:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define POT_DDR  DDRC
  56:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** //#define POT_PIN  PINC
  57:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define POT      PC4
  58:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  59:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** //boolean values for input to pourDrink function
  60:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define POUR_ON     true
  61:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #define POUR_OFF    false
  62:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  63:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** volatile bool pour_drink = false;
  64:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** volatile int pourTime; // time pump is on (in milliseconds)
  65:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  66:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** void initIO(void)
  67:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** {
 114               	.LM0:
 115               	.LFBB1:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
  68:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // set relay pin as output
  69:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     RELAY_DDR   |= _BV(RELAY_PIN);
 121               	.LM1:
 122 0000 209A      		sbi 0x4,0
  70:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  71:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // initialize switches as inputs
  72:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     SW_DDR      &= ~( _BV(SW_GREEN) | _BV(SW_RED) );
 124               	.LM2:
 125 0002 87B1      		in r24,0x7
 126 0004 867F      		andi r24,lo8(-10)
 127 0006 87B9      		out 0x7,r24
  73:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  74:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // initialize leds in buttons as outputs
  75:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     SW_DDR      |= ( _BV(SW_GREEN_LED) | _BV(SW_RED_LED) );
 129               	.LM3:
 130 0008 87B1      		in r24,0x7
 131 000a 8660      		ori r24,lo8(6)
 132 000c 87B9      		out 0x7,r24
  76:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  77:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // initialize potentiometer as input
  78:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     POT_DDR     |= _BV(POT);
 134               	.LM4:
 135 000e 3C9A      		sbi 0x7,4
  79:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  80:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // Enable internal pull-up resistors on switches
  81:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     SW_PORT     |= _BV(SW_RED) | _BV(SW_GREEN);
 137               	.LM5:
 138 0010 88B1      		in r24,0x8
 139 0012 8960      		ori r24,lo8(9)
 140 0014 88B9      		out 0x8,r24
  82:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  83:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // Make sure relay is off, just in case
  84:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     RELAY_PORT  &= ~_BV(RELAY_PIN);
 142               	.LM6:
 143 0016 2898      		cbi 0x5,0
  85:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  86:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     //Enable interrupts
  87:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     PCICR       |= _BV(SW_INT_FLAG);
 145               	.LM7:
 146 0018 E8E6      		ldi r30,lo8(104)
 147 001a F0E0      		ldi r31,0
 148 001c 8081      		ld r24,Z
 149 001e 8160      		ori r24,lo8(1)
 150 0020 8083      		st Z,r24
  88:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     PCMSK1      |= _BV(SW_RED) | _BV(SW_GREEN);
 152               	.LM8:
 153 0022 ECE6      		ldi r30,lo8(108)
 154 0024 F0E0      		ldi r31,0
 155 0026 8081      		ld r24,Z
 156 0028 8960      		ori r24,lo8(9)
 157 002a 8083      		st Z,r24
 158 002c 0895      		ret
 160               	.Lscope1:
 162               	.global	pourDrink_timed
 164               	pourDrink_timed:
  89:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** }
  90:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
  91:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** //pours for pourTime milliseconds while (volatile) pour is true
  92:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** void pourDrink_timed(void) // uses volatile global variables to pour drink
  93:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** {
 166               	.LM9:
 167               	.LFBB2:
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
  94:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  95:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // read analog value
  96:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  97:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     int pourCounter = pourTime;
 173               	.LM10:
 174 002e 8091 0000 		lds r24,pourTime
 175 0032 9091 0000 		lds r25,pourTime+1
 176               	.L3:
  98:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
  99:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // pour drink, check every ms
 100:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     while ( pour_drink && pourCounter )
 178               	.LM11:
 179 0036 2091 0000 		lds r18,pour_drink
 180 003a 2223      		tst r18
 181 003c 01F0      		breq .L4
 183               	.LM12:
 184 003e 0097      		sbiw r24,0
 185 0040 01F0      		breq .L4
 101:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     {
 102:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         RELAY_PORT |= _BV(RELAY_PIN);
 187               	.LM13:
 188 0042 289A      		sbi 0x5,0
 189               	.LBB6:
 190               	.LBB7:
 192               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 194               	.LM14:
 195 0044 E9EF      		ldi r30,lo8(249)
 196 0046 F0E0      		ldi r31,hi8(249)
 197 0048 3197      		1: sbiw r30,1
 198 004a 01F4      		brne 1b
 199 004c 00C0      		rjmp .
 200 004e 0000      		nop
 201               	.LBE7:
 202               	.LBE6:
 204               	.Ltext2:
 103:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         _delay_ms(1);
 104:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         pourCounter--;
 206               	.LM15:
 207 0050 0197      		sbiw r24,1
 208 0052 00C0      		rjmp .L3
 209               	.L4:
 105:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     }
 106:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 107:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     RELAY_PORT &= ~_BV(RELAY_PIN); // stop pouring
 211               	.LM16:
 212 0054 2898      		cbi 0x5,0
 213 0056 0895      		ret
 218               	.Lscope2:
 219               		.section	.text.startup,"ax",@progbits
 221               	.global	main
 223               	main:
 108:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 109:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** }
 110:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
 111:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #if 0
 112:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
 113:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** ISR(SW_INT_VECT) // put in vector
 114:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** {
 115:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     switch ( SW_PIN )
 116:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     {
 117:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         case _BV(SW_GREEN):                   // green button pressed
 118:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             
 119:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         case _BV(SW_RED):                     // red button pressed
 120:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             
 121:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         case ( _BV(SW_GREEN) | _BV(SW_RED) ):   // both switched pressed
 122:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             // Only green switch pressed
 123:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     }
 124:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 125:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 126:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // ISR: if either "pour" button has been pressed
 127:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // light correct button while being pressed
 128:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // If green button, pour while it is pressed
 129:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // If red button, set pourTime to equivalent POT_PIN value
 130:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // and set bool pour = true
 131:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 132:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // GR
 133:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 00           All off
 134:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 01           Pour based on time
 135:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 10           Pour while pressed
 136:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 11           Pour while pressed, then based on time
 137:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 01 -> 11     Initially: pour based on time; then stop
 138:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 10 -> 11     Initially: pour while pressed; then stop
 139:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // 11 -> 10/01  keep pouring
 140:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** }
 141:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
 142:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #endif
 143:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
 144:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** 
 145:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** int main(void)
 146:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** {
 225               	.LM17:
 226               	.LFBB3:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 147:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     initIO();
 232               	.LM18:
 233 0000 0E94 0000 		call initIO
 148:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 149:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #if 0
 150:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 151:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // enable interrupts
 152:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     sei();
 153:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 154:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     if (pour_drink)
 155:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         pourDrink();
 156:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 157:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // loops forever
 158:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     for (;;)
 159:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     {
 160:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         if ( SW_PIN & _BV(SW_GREEN) == 0 )  // switch pressed (brought low)
 161:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         {
 162:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             RELAY_PORT  |=  _BV(RELAY_PIN);     // pour drink
 163:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             SW_PORT     |=  _BV(SW_GREEN_LED);  // turn light on
 164:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         }
 165:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         else
 166:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         {
 167:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             RELAY_PORT  &= ~_BV(RELAY_PIN);     // stop pouring
 168:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****             SW_PORT     &= ~_BV(SW_GREEN_LED);  // turn off LED
 169:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         }
 170:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     }
 171:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 172:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c **** #endif
 173:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 174:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     
 175:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     // for now, just toggle the relay pin (for HW debugging)
 176:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     while(1)
 177:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****     {
 178:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         _delay_ms(500); // wait a second
 179:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         
 180:/Users/tedmyers/GitHub/DrinkBot/Drinkbot_Firmware/main.c ****         RELAY_PORT ^= _BV(RELAY_PIN); // use xor to toggle pin
 235               	.LM19:
 236 0004 91E0      		ldi r25,lo8(1)
 237               	.L11:
 238               	.LBB8:
 239               	.LBB9:
 241               	.Ltext3:
 243               	.LM20:
 244 0006 2FE9      		ldi r18,lo8(99999)
 245 0008 36E8      		ldi r19,hi8(99999)
 246 000a 81E0      		ldi r24,hlo8(99999)
 247 000c 2150      		1: subi r18,1
 248 000e 3040      		sbci r19,0
 249 0010 8040      		sbci r24,0
 250 0012 01F4      		brne 1b
 251 0014 00C0      		rjmp .
 252 0016 0000      		nop
 253               	.LBE9:
 254               	.LBE8:
 256               	.Ltext4:
 258               	.LM21:
 259 0018 85B1      		in r24,0x5
 260 001a 8927      		eor r24,r25
 261 001c 85B9      		out 0x5,r24
 262 001e 00C0      		rjmp .L11
 264               	.Lscope3:
 265               		.comm	pourTime,2,1
 266               	.global	pour_drink
 267               		.section .bss
 270               	pour_drink:
 271 0000 00        		.zero	1
 274               		.text
 276               	.Letext0:
 277               		.ident	"GCC: (GNU) 4.8.1"
 278               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:2      *ABS*:0000003e __SP_H__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:3      *ABS*:0000003d __SP_L__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:4      *ABS*:0000003f __SREG__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:6      *ABS*:00000001 __zero_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:112    .text:00000000 initIO
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:164    .text:0000002e pourDrink_timed
                            *COM*:00000002 pourTime
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:270    .bss:00000000 pour_drink
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccte8vZz.s:223    .text.startup:00000000 main

UNDEFINED SYMBOLS
__do_clear_bss
